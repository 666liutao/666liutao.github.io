(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{517:function(t,n,a){"use strict";a.r(n);var e=a(6),i=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-datasource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-datasource"}},[t._v("#")]),t._v(" 1. DataSource")]),t._v(" "),a("ul",[a("li",[t._v("在 JDBC 的实现过程中，最消耗资源的从来不是执行 SQL 之类的过程，而是获取-释放 数据库连接 Connection 的过程。")]),t._v(" "),a("li",[t._v("之前通过 DriverManager 获得的数据库连接对象，每一个 Connection 对应一个物理连接。")]),t._v(" "),a("li",[t._v("每一次操作都会打开一个物理连接，操作结束释放连接，这回造成极大的性能问题。")]),t._v(" "),a("li",[t._v("为了解决这个问题，JDBC 引入了数据源（数据库连接池+连接池管理）的概念，也就是 DataSource 接口。")]),t._v(" "),a("li",[t._v("DataSource 在系统启动时，建立了足够多的 Connection，这些 Connection 组成了一个连接池。")]),t._v(" "),a("li",[t._v("每一次程序请求数据库连接，就从连接池中取出已有的连接，使用完毕之后不关闭 Connection，而是将 Connection 归还给连接池。")]),t._v(" "),a("li",[t._v("DataSource 的本质就是一个工厂，用来管理 Connection。")]),t._v(" "),a("li",[t._v("DataSource 的常用参数有：\n"),a("ul",[a("li",[t._v("数据库初始连接数")]),t._v(" "),a("li",[t._v("连接池最大连接数")]),t._v(" "),a("li",[t._v("连接池最小连接数")]),t._v(" "),a("li",[t._v("连接池每次增加容量")])])]),t._v(" "),a("li",[t._v("DataSource 只是一个接口，具体的实现由数据库厂商和一些开源组织开发，比较著名的有：\n"),a("ul",[a("li",[t._v("DBCP 数据源（Tomcat）")]),t._v(" "),a("li",[t._v("Druid 数据源 （alibaba）")]),t._v(" "),a("li",[t._v("C3P0 数据源（Hibernate）")])])])])])}),[],!1,null,null,null);n.default=i.exports}}]);