(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{518:function(n,s,a){"use strict";a.r(s);var t=a(6),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"_1-什么是orm框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是orm框架"}},[n._v("#")]),n._v(" 1. 什么是ORM框架")]),n._v(" "),a("ul",[a("li",[n._v("当我们获取到 ResultSet 之后，显然这个不是我们想要的数据结构。")]),n._v(" "),a("li",[n._v("数据库中的每一个表，在 Java 代码中，一定会有一个类与之对应，此时我们就需要ORM框架。")]),n._v(" "),a("li",[n._v("ORM（对象关系映射，Object-Relational Mapping）框架是一种将面向对象编程语言中的对象与关系型数据库中的表进行映射的技术。")]),n._v(" "),a("li",[n._v("工作原理\n"),a("ul",[a("li",[n._v("对象映射：ORM将编程语言中的类（Class）映射到数据库中的表，将类的实例（对象）映射到表中的行，将类的属性映射到表中的列。")]),n._v(" "),a("li",[n._v("查询映射：ORM将对象的方法调用转换为数据库查询语句。例如，你可以通过对象的方法来创建、读取、更新和删除数据库中的数据。")])])]),n._v(" "),a("li",[n._v("优势\n"),a("ul",[a("li",[n._v("提高开发效率：开发者可以通过操作对象来进行数据库操作，而无需关注底层的SQL语句。")]),n._v(" "),a("li",[n._v("数据库独立性：ORM使得应用程序可以在不同的数据库之间切换而不需要修改大量代码。")]),n._v(" "),a("li",[n._v("维护性和可读性：代码更具可读性和维护性，因为开发者操作的是编程语言的对象而不是复杂的")])])])]),n._v(" "),a("h3",{attrs:{id:"_1-1-常见的orm框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-常见的orm框架"}},[n._v("#")]),n._v(" 1.1 常见的ORM框架")]),n._v(" "),a("ul",[a("li",[n._v("Hibernate\n"),a("ul",[a("li",[n._v("Hibernate 框架是一个全表映射的框架。通常开发者只要定义好持久化对象到数据库表的映射关系，就可以通过 Hibernate 框架提供的方法完成持久层操作")]),n._v(" "),a("li",[n._v("开发者并不需要熟练地掌握 SQL 语句的编写，Hibernate 框架会根据编制的存储逻辑，自动生成对应的 SQL，并调用 JDBC 接口来执行，所以其开发效率会高于 MyBatis 框架。")])])]),n._v(" "),a("li",[n._v("MyBatis\n"),a("ul",[a("li",[n._v("是一个半自动映射的框架。这里所谓的“半自动”是相对于 Hibernate 框架全表映射而言的，MyBatis 框架需要手动匹配提供 POJO、SQL 和映射关系，而 Hibernate 框架只需提供 POJO 和映射关系即可")])])]),n._v(" "),a("li",[n._v("JPA\n"),a("ul",[a("li",[n._v("Java Persistence API：用于对象持久化的 API。")]),n._v(" "),a("li",[n._v("Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层")]),n._v(" "),a("li",[n._v("JPA 是 hibernate 的一个抽象（就像JDBC和JDBC驱动的关系）")]),n._v(" "),a("li",[n._v("JPA 是规范：JPA 本质上就是一种 ORM 规范，不是ORM 框架 —— 因为 JPA 并未提供 ORM 实现，它只是制订了一些规范，提供了一些编程的 API 接口，但具体实现则由 ORM 厂商提供实现。")]),n._v(" "),a("li",[n._v("Hibernate 是实现：Hibernate 除了作为 ORM 框架之外，它也是一种 JPA 实现从功能上来说， JPA 是 Hibernate 功能的一个子集。")])])])]),n._v(" "),a("h2",{attrs:{id:"_2-反射-注解实现简易orm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-反射-注解实现简易orm"}},[n._v("#")]),n._v(" 2. 反射+注解实现简易ORM")]),n._v(" "),a("ul",[a("li",[n._v("第一步，定义一个注解。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.liutao.annotation;\n \nimport java.lang.annotation.*;\n \n@Documented\n@Inherited\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface ColumnAnnotation {\n \n    String column() default "";\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("ul",[a("li",[n._v("第二步，将注解加到 JavaBean 中。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.liutao.entity;\n \nimport com.liutao.annotation.ColumnAnnotation;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n \n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic final class Student {\n \n    @ColumnAnnotation(column = "STUDENT_ID")\n    private int id;\n \n    @ColumnAnnotation(column = "STUDENT_NAME")\n    private String name;\n \n    @ColumnAnnotation(column = "STUDENT_PASSWORD")\n    private String password;\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("ul",[a("li",[n._v("第三步，在创建转换类的时候，完成数据库列名-JavaBean 属性的映射关系的初始化。")]),n._v(" "),a("li",[n._v("第四步，对 ResultSetMetaData 分析时，使用反射，将值注入到对应的 Field 中。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package com.liutao.orm;\n \nimport com.liutao.annotation.ColumnAnnotation;\nimport com.liutao.constants.ErrorCode;\nimport com.liutao.exception.JdbcSampleException;\n \nimport java.lang.reflect.Field;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.util.HashMap;\nimport java.util.Map;\n \npublic final class FlexibleResultSetAdapter<T> implements ResultSetAdapter<T> {\n \n    private Map<String, Field> columnMap = new HashMap<>();\n \n    private Class<T> clazz;\n \n    public FlexibleResultSetAdapter(Class<T> clazz) {\n        this.clazz = clazz;\n        initColumnMap(clazz);\n    }\n \n    private void initColumnMap(Class<T> clazz) {\n        for (Field field : clazz.getDeclaredFields()) {\n            ColumnAnnotation annotation = field.getAnnotation(ColumnAnnotation.class);\n            columnMap.put(annotation.column(), field);\n        }\n    }\n \n    @Override\n    public T transferEntity(ResultSet rs, ResultSetMetaData meta) {\n        try {\n            T t = clazz.newInstance();\n            for (int i = 1; i <= meta.getColumnCount(); ++i) {\n                String dbColumn = meta.getColumnName(i);\n                Field field = columnMap.get(dbColumn);\n                if (field == null) {\n                    throw new JdbcSampleException(ErrorCode.MISSING_COLUMN_ERROR, "Fail to find column " + dbColumn + ".");\n                }\n                field.setAccessible(true);\n                field.set(t, rs.getObject(i));\n            }\n            return t;\n        } catch (Exception e) {\n            String msg = "Fail to get ORM relation for class: " + clazz.getName();\n            throw new JdbcSampleException(ErrorCode.MISSING_COLUMN_ERROR, msg);\n        }\n    }\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br")])]),a("ul",[a("li",[n._v("最后，对 ORM 进行封装。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('  package com.liutao.executor;\n   \n  import com.liutao.constants.ErrorCode;\n  import com.liutao.exception.JdbcSampleException;\n  import com.liutao.orm.ResultSetAdapter;\n  import com.liutao.util.Connector;\n  import com.liutao.util.DriverLoader;\n  import lombok.AllArgsConstructor;\n  import lombok.NoArgsConstructor;\n   \n  import java.sql.Connection;\n  import java.sql.ResultSet;\n  import java.sql.SQLException;\n  import java.sql.Statement;\n  import java.util.LinkedList;\n  import java.util.List;\n   \n  @NoArgsConstructor\n  @AllArgsConstructor\n  public final class SqlExecutorStatement<T> implements SqlExecutor<T> {\n   \n      private ResultSetAdapter<T> adapter;\n   \n      @Override\n      public int executeUpdate(String sql) {\n          DriverLoader.loadSqliteDriver();\n          try (Connection conn = Connector.getSqlConnection();\n               Statement stmt = conn.createStatement()) {\n              return stmt.executeUpdate(sql);\n          } catch (SQLException e) {\n              String msg = "Fail to execute query using statement.";\n              throw new JdbcSampleException(ErrorCode.EXECUTE_UPDATE_FAILURE, msg);\n          }\n      }\n   \n      @Override\n      public List<T> executeQuery(String sql) {\n          DriverLoader.loadSqliteDriver();\n          try (Connection conn = Connector.getSqlConnection();\n               Statement stmt = conn.createStatement()) {\n              List<T> list = new LinkedList<>();\n              try (ResultSet rs = stmt.executeQuery(sql)) {\n                  while (rs.next()) {\n                      list.add(adapter.transferEntity(rs, rs.getMetaData()));\n                  }\n              }\n              return list;\n          } catch (SQLException e) {\n              String msg = "Fail to execute query using statement.";\n              throw new JdbcSampleException(ErrorCode.EXECUTE_QUERY_FAILURE, msg);\n          }\n      }\n  }\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);