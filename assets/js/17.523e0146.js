(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{523:function(s,n,a){"use strict";a.r(n);var t=a(6),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"问题描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[s._v("#")]),s._v(" 问题描述")]),s._v(" "),a("ul",[a("li",[s._v("加了RefreshScope注解后，该类会由CGLIB进行代理，属性值为空,只能通过get获取值")]),s._v(" "),a("li",[s._v("而 Validator 校验时是直接获取属性的值来校验的,并不是通过get方法获取")]),s._v(" "),a("li",[s._v("造成配置文件有值时,校验也无法通过")])]),s._v(" "),a("h2",{attrs:{id:"问题复现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题复现"}},[s._v("#")]),s._v(" 问题复现")]),s._v(" "),a("p",[s._v("配置文件\napplication.yml")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("com:\n  liutao:\n    config:\n      name: test\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("配置类\nAProperties.java")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Data\n@NoArgsConstructor\n@Component\n@ConfigurationProperties(prefix = "com.liutao.config")\n@RefreshScope\npublic class AProperties {\n\n    @NotEmpty\n    private String name;\n    \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("健康检查\nAPropertiesHealthIndicator.java")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import javax.validation.ConstraintViolation;\nimport javax.validation.Validator;\n\n@Component\n@Log4j2\npublic class APropertiesHealthIndicator extends AbstractHealthIndicator {\n\n    @Autowired\n    private Validator validate;\n\n    @Override\n    protected void doHealthCheck(Builder builder) {\n      // 调试点\n      Object aProperties = Spring.getBean("AProperties");\n      Set<ConstraintViolation<Object>> violations = validate.validate(properties);\n      if (isEmpty) {\n            builder.up();    \n            builder.withDetail("content", Status.UP.getCode());\n            log.info("Properties content is Normal");\n        } else {\n            builder.down();\n            log.error("Properties content is ERROR");\n            builder.withDetails(getErrorMap(violations));\n        }\n    }\n    \n    private Map<String, Object> getErrorMap(Set<ConstraintViolation<Object>> violations) {\n        Map<String, Object> contentMap = new HashMap<>(1);\n        Map<String, String> map = new HashMap<>(16);\n        map.put("status", Status.DOWN.getCode());\n\n        for (ConstraintViolation<Object> violation : violations) {\n            map.put(violation.getPropertyPath().toString(), violation.getMessage());\n            log.warn( violation.getPropertyPath().toString() + "" + violation.getMessage());\n        }\n\n        contentMap.put("content", map);\n        return contentMap;\n    }\n\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("p",[s._v("程序跑到调试点时:")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://raw.githubusercontent.com/666liutao/images/main/note/health-check-bug.jpg",alt:"image"}})]),s._v(" "),a("p",[s._v("可以看到该代理对象通过get方法可以获取值，但该代理对象的字段值为null,由于校验时是通过反射获取字段值的,所以这时校验会显示name为空。")]),s._v(" "),a("h2",{attrs:{id:"解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[s._v("#")]),s._v(" 解决方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('AProperties tempAProperties = new AProperties();\nBeanUtils.copyProperties(Spring.getBean("AProperties"), tempAProperties);\nSet<ConstraintViolation<Object>> violations = validate.validate(tempAProperties);\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);